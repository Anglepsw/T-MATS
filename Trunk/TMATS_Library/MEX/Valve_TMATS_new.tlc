%% File : Valve_TMATS_new.tlc
%%
%% Description: 
%%	 Simulink Coder TLC Code Generation file for Valve_TMATS
%%
%implements Valve_TMATS_new "C"

%% Function: BlockTypeSetup ===============================================
%%
%function BlockTypeSetup(block, system) void
	%%
	%% The Target Language must be C
	%if ::GenCPP==1
		%<LibReportFatalError("This S-Function generated by the Legacy Code Tool must be only used with the C Target Language")>
	%endif

	%<LibAddToCommonIncludes("types_TMATS.h")>

	%<SLibAddToStaticSources("Valve_TMATS_body.c")>

	%openfile forwardDecls
		extern void Valve_TMATS_body(double*, const double*, const ValveStruct*);
		ValveStruct valvePrms;
	%closefile forwardDecls

	%assign srcFile = LibGetModelDotCFile()
	%<LibSetSourceFileSection(srcFile, "Definitions", forwardDecls)>

%endfunction

%% Function: BlockInstanceSetup ===========================================
%%
%function BlockInstanceSetup(block, system) void
	%%
	%<LibBlockSetIsExpressionCompliant(block)>
%endfunction

%% Function: Outputs ======================================================
%%
%function Outputs(block, system) Output
	%%
	valvePrms.VlvfullyOpen			= %<LibBlockParameter(VlvfullyOpen,"","",0)>;
	valvePrms.VlvdeadZone			= %<LibBlockParameter(VlvdeadZone,"","",0)>;
	valvePrms.Valve_Ae				= %<LibBlockParameter(Valve_Ae,"","",0)>;
	valvePrms.X_V_PRVec				= (double*)(%<LibBlockParameterBaseAddr(X_V_PRVec)>);
	valvePrms.T_V_WcVec			    = (double*)(%<LibBlockParameterBaseAddr(T_V_WcVec)>);
	valvePrms.A	                    = %<LibBlockParameterSize(X_V_PRVec)[1]>;

	%assign u_ptr			  = LibBlockInputSignalAddr(0, "", "", 0)
	%assign u_dataType		  = LibBlockInputSignalDataTypeName(0,"")
	%assign y_ptr			  = LibBlockOutputSignalAddr(0, "", "", 0)
	%assign y_dataType		  = LibBlockOutputSignalDataTypeName(0,"")
	%%
	Valve_TMATS_body((%<y_dataType>*)%<y_ptr>,\ 
					 (%<u_dataType>*)%<u_ptr>,\
					  &valvePrms);
					  
					  
	%%
%endfunction

%% [EOF]
