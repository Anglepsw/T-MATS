%% File : Compressor_TMATS_new.tlc
%%
%% Description: 
%%   Simulink Coder TLC Code Generation file for Compressor_TMATS_new
%%
%implements Compressor_TMATS_new "C"

%% Function: BlockTypeSetup ===============================================
%%
%function BlockTypeSetup(block, system) void
  %%
  %% The Target Language must be C
  %if ::GenCPP==1
    %<LibReportFatalError("This S-Function generated by the Legacy Code Tool must be only used with the C Target Language")>
  %endif

  %<LibAddToCommonIncludes("types_TMATS.h")>
  
  %<SLibAddToStaticSources("Compressor_TMATS_body.c")>

  %openfile pStructDef
      /* Parameter struct for Compressor_TMATS_body */
      CompStruct compPrms;
  %closefile pStructDef

  %assign srcFile = LibGetModelDotCFile()
  %<LibSetSourceFileSection(srcFile, "Definitions", pStructDef)>

%endfunction

%% Function: BlockInstanceSetup ===========================================
%%
%function BlockInstanceSetup(block, system) void
  %%
    %<LibBlockSetIsExpressionCompliant(block)>
%endfunction

%% Function: Outputs ======================================================
%%
%function Outputs(block, system) Output
  %%
    compPrms.NcDes              = *mxGetPr(NcDes_p(S));
    compPrms.PRDes              = *mxGetPr(PRDes_p(S));
    compPrms.EffDes             = *mxGetPr(EffDes_p(S));
    compPrms.RlineDes           = *mxGetPr(RlineDes_p(S));
    compPrms.IDes               = *mxGetPr(IDesign_p(S));
    compPrms.CustBldEn          = *mxGetPr(CustBldEn_p(S));
    compPrms.FBldEn             = *mxGetPr(FBldEn_p(S));
    compPrms.CustBldNm          = *mxGetPr(CustBldNm_p(S));
    compPrms.FracBldNm          = *mxGetPr(FracBldNm_p(S));
    compPrms.Y_C_Map_NcVec        = mxGetPr(Y_C_Map_NcVec_p(S));
    compPrms.X_C_RlineVec         = mxGetPr(X_C_RlineVec_p(S));
    compPrms.Z_C_AlphaVec         = mxGetPr(Z_C_AlphaVec_p(S));
    compPrms.T_C_Map_WcArray      = mxGetPr(T_C_Map_WcArray_p(S));
    compPrms.T_C_Map_PRArray      = mxGetPr(T_C_Map_PRArray_p(S));
    compPrms.T_C_Map_EffArray     = mxGetPr(T_C_Map_EffArray_p(S));
    compPrms.FracCusBldht         = mxGetPr(FracCusBldht_p(S));
    compPrms.FracCusBldPt         = mxGetPr(FracCusBldPt_p(S));
    compPrms.FracBldht            = mxGetPr(FracBldht_p(S));
    compPrms.FracBldPt            = mxGetPr(FracBldPt_p(S));
    compPrms.X_C_Map_WcSurgeVec   = mxGetPr(X_C_Map_WcSurgeVec_p(S));
    compPrms.T_C_Map_PRSurgeVec   = mxGetPr(T_C_Map_PRSurgeVec_p(S));
    compPrms.A   = mxGetNumberOfElements(Y_C_Map_NcVec_p(S));
    compPrms.B   = mxGetNumberOfElements(X_C_RlineVec_p(S));
    compPrms.C   = mxGetNumberOfElements(Z_C_AlphaVec_p(S));
    compPrms.D   = mxGetNumberOfElements(X_C_Map_WcSurgeVec_p(S));
    compPrms.WcMapCol  = *mxGetPr(WcMapCol_p(S));
    compPrms.PRMapCol  = *mxGetPr(PRMapCol_p(S));
    compPrms.EffMapCol = *mxGetPr(EffMapCol_p(S));
    compPrms.WcMapRw   = *mxGetPr(WcMapRw_p(S));
    compPrms.PRMapRw   = *mxGetPr(PRMapRw_p(S));
    compPrms.EffMapRw  = *mxGetPr(EffMapRw_p(S));
    compPrms.WcMapLay   = *mxGetPr(WcMapLay_p(S));
    compPrms.PRMapLay   = *mxGetPr(PRMapLay_p(S));
    compPrms.EffMapLay  = *mxGetPr(EffMapLay_p(S));
    
    /*---------Define Inputs for input port 1--------*/
    const real_T *u  = (const real_T*) ssGetInputPortSignal(S,0);
    
    /*---------Define Inputs for input port 2--------*/
    const real_T *Wcust = ssGetInputPortRealSignal(S, 1);
    
    /*---------Define Inputs for input port 3--------*/
    const real_T *FracWbld  = ssGetInputPortSignal(S,2);
    
    real_T *y  = (real_T *)ssGetOutputPortRealSignal(S,0);   /* Output Array port 1 */
    real_T *y1  = (real_T *)ssGetOutputPortRealSignal(S,1);   /* Output Array port 2 */
    real_T *y2  = (real_T *)ssGetOutputPortRealSignal(S,2);   /* Output Array port 3 */
	
	Compressor_TMATS_body(y, y1, y2, u, Wcust, FracWbld, &compPrms);
%endfunction

%% [EOF]
