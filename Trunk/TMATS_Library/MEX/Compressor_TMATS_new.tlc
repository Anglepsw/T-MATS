%% File : Compressor_TMATS_new.tlc
%%
%% Description: 
%%   Simulink Coder TLC Code Generation file for Compressor_TMATS_new
%%
%implements Compressor_TMATS_new "C"

%% Function: BlockTypeSetup ===============================================
%%
%function BlockTypeSetup(block, system) void
    %%
    %% The Target Language must be C
    %if ::GenCPP==1
        %<LibReportFatalError("This S-Function generated by the Legacy Code Tool must be only used with the C Target Language")>
    %endif

    %<LibAddToCommonIncludes("types_TMATS.h")>

    %<SLibAddToStaticSources("Compressor_TMATS_body.c")>

    %openfile pStructDef
        CompStruct compPrms;
    %closefile pStructDef

    %assign srcFile = LibGetModelDotCFile()
    %<LibSetSourceFileSection(srcFile, "Definitions", pStructDef)>

%endfunction

%% Function: BlockInstanceSetup ===========================================
%%
%function BlockInstanceSetup(block, system) void
    %%
    %<LibBlockSetIsExpressionCompliant(block)>
%endfunction

%% Function: Outputs ======================================================
%%
%function Outputs(block, system) Output
    %%
    compPrms.NcDes              = %<LibBlockParameter(NcDes,"","",0)>;
    compPrms.PRDes              = %<LibBlockParameter(PRDes,"","",0)>;
    compPrms.EffDes             = %<LibBlockParameter(EffDes,"","",0)>;
    compPrms.RlineDes           = %<LibBlockParameter(RlineDes,"","",0)>;
    compPrms.IDes               = %<LibBlockParameter(IDes,"","",0)>;
    compPrms.CustBldEn          = %<LibBlockParameter(CustBldEn,"","",0)>;
    compPrms.FBldEn             = %<LibBlockParameter(FBldEn,"","",0)>;
    compPrms.CustBldNm          = %<LibBlockParameter(CustBldNm,"","",0)>;
    compPrms.FracBldNm          = %<LibBlockParameter(FracBldNm,"","",0)>;
    compPrms.Y_C_Map_NcVec        = (double*)(%<LibBlockParameterBaseAddr(Y_C_Map_NcVec)>);
    compPrms.X_C_RlineVec         = (double*)(%<LibBlockParameterBaseAddr(X_C_RlineVec)>);
    compPrms.Z_C_AlphaVec         = (double*)(%<LibBlockParameterBaseAddr(Z_C_AlphaVec)>);
    compPrms.T_C_Map_WcArray      = (double*)(%<LibBlockParameterBaseAddr(T_C_Map_WcArray)>);
    compPrms.T_C_Map_PRArray      = (double*)(%<LibBlockParameterBaseAddr(T_C_Map_PRArray)>);
    compPrms.T_C_Map_EffArray     = (double*)(%<LibBlockParameterBaseAddr(T_C_Map_EffArray)>);
    compPrms.FracCusBldht         = (double*)(%<LibBlockParameterBaseAddr(FracCusBldht)>);
    compPrms.FracCusBldPt         = (double*)(%<LibBlockParameterBaseAddr(FracCusBldPt)>);
    compPrms.FracBldht            = (double*)(%<LibBlockParameterBaseAddr(FracBldht)>);
    compPrms.FracBldPt            = (double*)(%<LibBlockParameterBaseAddr(FracBldPt)>);
    compPrms.X_C_Map_WcSurgeVec   = (double*)(%<LibBlockParameterBaseAddr(X_C_Map_WcSurgeVec)>);
    compPrms.T_C_Map_PRSurgeVec   = (double*)(%<LibBlockParameterBaseAddr(T_C_Map_PRSurgeVec)>);
    compPrms.A   = %<LibBlockParameterSize(Y_C_Map_NcVec)[1]>;
    compPrms.B   = %<LibBlockParameterSize(X_C_RlineVec)[1]>;
    compPrms.C   = %<LibBlockParameterSize(Z_C_AlphaVec)[1]>;
    compPrms.D   = %<LibBlockParameterSize(X_C_Map_WcSurgeVec)[1]>;
    compPrms.WcMapCol  = %<LibBlockParameter(WcMapCol,"","",0)>;
    compPrms.PRMapCol  = %<LibBlockParameter(PRMapCol,"","",0)>;
    compPrms.EffMapCol = %<LibBlockParameter(EffMapCol,"","",0)>;
    compPrms.WcMapRw   = %<LibBlockParameter(WcMapRw,"","",0)>;
    compPrms.PRMapRw   = %<LibBlockParameter(PRMapRw,"","",0)>;
    compPrms.EffMapRw  = %<LibBlockParameter(EffMapRw,"","",0)>;
    compPrms.WcMapLay   = %<LibBlockParameter(WcMapLay,"","",0)>;
    compPrms.PRMapLay   = %<LibBlockParameter(PRMapLay,"","",0)>;
    compPrms.EffMapLay  = %<LibBlockParameter(EffMapLay,"","",0)>;

    %assign u_ptr             = LibBlockInputSignalAddr(0, "", "", 0)
    %assign u_dataType        = LibBlockInputSignalDataTypeName(0,"")
    %assign wc_ptr            = LibBlockInputSignalAddr(1, "", "", 0)
    %assign wc_dataType       = LibBlockInputSignalDataTypeName(1,"")
    %assign fwb_ptr           = LibBlockInputSignalAddr(2, "", "", 0)
    %assign fwb_dataType      = LibBlockInputSignalDataTypeName(2,"")
    %assign y_ptr             = LibBlockOutputSignalAddr(0, "", "", 0)
    %assign y_dataType        = LibBlockOutputSignalDataTypeName(0,"")
    %assign y1_ptr            = LibBlockOutputSignalAddr(1, "", "", 0)
    %assign y1_dataType       = LibBlockOutputSignalDataTypeName(1,"")
    %assign y2_ptr            = LibBlockOutputSignalAddr(2, "", "", 0)
    %assign y2_dataType       = LibBlockOutputSignalDataTypeName(2,"")

    Compressor_TMATS_body((%<y_dataType>*)%<y_ptr>,\ 
                          (%<y1_dataType>*)%<y1_ptr>,\
                          (%<y2_dataType>*)%<y2_ptr>,\ 						  
                          (%<u_dataType>*) %<u_ptr>,\
                          (%<wc_dataType>*)%<wc_ptr>,\
                          (%<fwb_dataType>*)%<fwb_ptr>,\
                          &compPrms);
%endfunction

%% [EOF]
