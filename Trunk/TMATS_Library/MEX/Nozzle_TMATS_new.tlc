%% File : Nozzle_TMATS_new.tlc
%%
%% Description: 
%%   Simulink Coder TLC Code Generation file for Turbine_TMATS_new
%%
%implements Nozzle_TMATS_new "C"

%% Function: BlockTypeSetup ===============================================
%%
%function BlockTypeSetup(block, system) void
    %%
    %% The Target Language must be C
    %if ::GenCPP==1
       %<LibReportFatalError("This S-Function generated by the Legacy Code Tool must be only used with the C Target Language")>
    %endif

    %<LibAddToCommonIncludes("types_TMATS.h")>

    %<SLibAddToStaticSources("Nozzle_TMATS_body.c")>

    %openfile pStructDef
        NozzleStruct nozPrms;
    %closefile pStructDef

    %assign srcFile = LibGetModelDotCFile()
    %<LibSetSourceFileSection(srcFile, "Definitions", pStructDef)>

%endfunction

%% Function: BlockInstanceSetup ===========================================
%%
%function BlockInstanceSetup(block, system) void
    %%
    %<LibBlockSetIsExpressionCompliant(block)>
%endfunction

%% Function: Outputs ======================================================
%%
%function Outputs(block, system) Output
    %%
    /*--------parameters defined in S-function block--------*/
    nozPrms.SwitchType             = %<LibBlockParameter(SwitchType,"","",0)>;
    nozPrms.flowLoss               = %<LibBlockParameter(flowLoss,"","",0)>;
    nozPrms.IDes                   = %<LibBlockParameter(IDes,"","",0)>;
    nozPrms.WDes                   = %<LibBlockParameter(WDes,"","",0)>;
    nozPrms.CfgEn                  = %<LibBlockParameter(CfgEn,"","",0)>;

    /* vector & array data */
    nozPrms.Y_N_FARVec            = (double*)(%<LibBlockParameterBaseAddr(Y_N_FARVec)>);
    nozPrms.T_N_RtArray           = (double*)(%<LibBlockParameterBaseAddr(T_N_RtArray)>);
    nozPrms.X_N_TtVec             = (double*)(%<LibBlockParameterBaseAddr(X_N_TtVec)>);
    nozPrms.T_N_MAP_gammaArray    = (double*)(%<LibBlockParameterBaseAddr(T_N_MAP_gammaArray)>);
    nozPrms.X_N_PEQPaVec          = (double*)(%<LibBlockParameterBaseAddr(X_N_PEQPaVec)>);
    nozPrms.T_N_CdThArray         = (double*)(%<LibBlockParameterBaseAddr(T_N_CdThArray)>);
    nozPrms.T_N_CvArray           = (double*)(%<LibBlockParameterBaseAddr(T_N_CvArray)>);
    nozPrms.T_N_CfgArray          = (double*)(%<LibBlockParameterBaseAddr(T_N_CfgArray)>);
    nozPrms.T_N_TGArray           = (double*)(%<LibBlockParameterBaseAddr(T_N_TGArray)>);
    nozPrms.X_N_TtVecTG           = (double*)(%<LibBlockParameterBaseAddr(X_N_TtVecTG)>);

    /*------get dimensions of parameter arrays-------*/
    nozPrms.A   = %<LibBlockParameterSize(Y_N_FARVec)[1]>;
    nozPrms.B   = %<LibBlockParameterSize(X_N_TtVec)[1]>;
    nozPrms.B1  = %<LibBlockParameterSize(X_N_PEQPaVec)[1]>;
    nozPrms.C   = %<LibBlockParameterSize(X_N_TtVecTG)[1]>;

    /*---------Define Inputs--------*/
    %assign u_ptr             = LibBlockInputSignalAddr(0, "", "", 0)
    %assign u_dataType        = LibBlockInputSignalDataTypeName(0,"")
    %assign y_ptr             = LibBlockOutputSignalAddr(0, "", "", 0)
    %assign y_dataType        = LibBlockOutputSignalDataTypeName(0,"")
    %%
    Nozzle_TMATS_body((%<y_dataType>*)%<y_ptr>,\ 
                      (%<u_dataType>*) %<u_ptr>,\
                       &nozPrms);
    %%
%endfunction

%% [EOF]
